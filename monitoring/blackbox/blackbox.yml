# Blackbox Exporter Configuration for Endpoint Monitoring
# Monitors HTTP/HTTPS endpoints, DNS resolution, and network connectivity

modules:
  # HTTP 2xx probe - checks if HTTP endpoints return success codes
  http_2xx:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204, 301, 302, 303, 307, 308]
      method: GET
      headers:
        Host: ""
        User-Agent: "Blackbox-Exporter/1.0 (Homelab-Monitoring)"
        Accept: "*/*"
      no_follow_redirects: false
      fail_if_ssl: false
      fail_if_not_ssl: false
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"

  # HTTP 2xx probe with POST method
  http_post_2xx:
    prober: http
    timeout: 10s
    http:
      method: POST
      headers:
        Content-Type: "application/x-www-form-urlencoded"
      body: ""

  # HTTPS probe with strict SSL validation
  https_2xx:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204, 301, 302, 303, 307, 308]
      method: GET
      no_follow_redirects: false
      fail_if_not_ssl: true
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"

  # HTTPS probe ignoring SSL certificate errors (for self-signed certs)
  https_2xx_no_verify:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204, 301, 302, 303, 307, 308]
      method: GET
      no_follow_redirects: false
      fail_if_not_ssl: true
      tls_config:
        insecure_skip_verify: true
      preferred_ip_protocol: "ip4"

  # DNS UDP probe for DNS resolution checks
  dns_udp:
    prober: dns
    timeout: 5s
    dns:
      query_name: "google.com"
      query_type: "A"
      valid_rcodes:
        - NOERROR
      validate_answer_rrs:
        fail_if_matches_regexp:
          - ".*"
        fail_if_all_match_regexp:
          - ".*"
        fail_if_not_matches_regexp:
          - ".*"
      validate_authority_rrs:
        fail_if_matches_regexp:
          - ".*"
      validate_additional_rrs:
        fail_if_matches_regexp:
          - ".*"
      preferred_ip_protocol: "ip4"

  # DNS TCP probe
  dns_tcp:
    prober: dns
    timeout: 5s
    dns:
      transport_protocol: "tcp"
      preferred_ip_protocol: "ip4"
      query_name: "google.com"
      query_type: "A"

  # DNS-over-HTTPS (DoH) probe
  dns_doh:
    prober: dns
    timeout: 10s
    dns:
      transport_protocol: "doh"
      doh:
        url: "https://1.1.1.1/dns-query"
        accept: "application/dns-message"
      query_name: "google.com"
      query_type: "A"

  # TCP connectivity probe
  tcp_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"

  # SSH connectivity probe
  ssh_banner:
    prober: tcp
    timeout: 10s
    tcp:
      query_response:
        - expect: "^SSH-2.0-"
      preferred_ip_protocol: "ip4"

  # ICMP ping probe
  icmp:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: "ip4"

  # Check if endpoint returns specific content
  http_content_match:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200]
      fail_if_body_not_matches_regexp:
        - "Dokploy"  # Example: check if Dokploy interface is working

  # API health check probe
  api_health:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: "application/json"
      fail_if_body_not_matches_regexp:
        - '\"status\":\s*\"(ok|healthy|up)\"'

  # Database connectivity probe (example for HTTP-based health checks)
  db_health:
    prober: http
    timeout: 15s
    http:
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: "application/json"

  # File server probe (NFS/SMB health via HTTP interface)
  file_server_health:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200, 401, 403]  # 401/403 might be OK if auth is required
      method: GET

  # Container registry probe
  container_registry:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200, 401]
      method: GET
      headers:
        User-Agent: "Docker-Registry-Health-Check"

  # Load balancer health probe
  lb_health:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: [200]
      method: GET
      no_follow_redirects: true

  # Dokploy specific health probe
  dokploy_health:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: "text/html,application/xhtml+xml"
      fail_if_body_not_matches_regexp:
        - "(Dokploy|Dashboard|Login)"

  # AdGuard Home health probe
  adguard_health:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: "application/json"
      fail_if_body_not_matches_regexp:
        - "(AdGuard|running|dns)"

  # QNAP health probe
  qnap_health:
    prober: http
    timeout: 15s
    http:
      valid_status_codes: [200, 302]  # QNAP might redirect to login
      method: GET
      tls_config:
        insecure_skip_verify: true  # QNAP often uses self-signed certificates

  # Proxmox health probe
  proxmox_health:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200]
      method: GET
      tls_config:
        insecure_skip_verify: true  # Proxmox often uses self-signed certificates
      fail_if_body_not_matches_regexp:
        - "(Proxmox|Virtual Environment|login)"

  # UCG Ultra SNMP probe (via HTTP management interface)
  ucg_ultra_health:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200, 302, 401]  # Various possible responses
      method: GET
      headers:
        User-Agent: "Network-Monitor/1.0"

  # Certificate expiry probe (detailed SSL certificate checking)
  ssl_expiry:
    prober: http
    timeout: 10s
    http:
      method: GET
      fail_if_not_ssl: true
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"

  # Speed test probe (checking if speed test interfaces are available)
  speedtest_health:
    prober: http
    timeout: 30s
    http:
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: "text/html"

  # Backup service health
  backup_health:
    prober: http
    timeout: 20s
    http:
      valid_status_codes: [200, 404]  # 404 might be OK if no web interface
      method: GET

  # VPN health probe
  vpn_health:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200, 401, 403]  # Various auth responses are OK
      method: GET
