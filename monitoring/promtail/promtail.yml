# Promtail Configuration for Log Collection
# Collects logs from various sources and sends them to Loki

server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

# Position file to track what has been read
positions:
  filename: /tmp/positions.yaml

# Loki client configuration
clients:
  - url: http://loki:3100/loki/api/v1/push
    tenant_id: homelab
    backoff_config:
      max_period: 5m
      max_retries: 10
      min_period: 500ms
    batchsize: 1048576
    batchwait: 1s
    timeout: 10s

# Scrape configurations
scrape_configs:
  # System logs
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          host: monitoring-host
          __path__: /var/log/syslog
    pipeline_stages:
      - match:
          selector: '{job="syslog"}'
          stages:
            - regex:
                expression: '^(?P<timestamp>\S+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<service>\S+)(\[(?P<pid>\d+)\])?\:\s*(?P<message>.*)$'
            - labels:
                hostname:
                service:
                pid:
            - timestamp:
                source: timestamp
                format: 'Jan 02 15:04:05'

  # Auth logs
  - job_name: auth
    static_configs:
      - targets:
          - localhost
        labels:
          job: auth
          host: monitoring-host
          __path__: /var/log/auth.log
    pipeline_stages:
      - match:
          selector: '{job="auth"}'
          stages:
            - regex:
                expression: '^(?P<timestamp>\S+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<service>\S+)(\[(?P<pid>\d+)\])?\:\s*(?P<message>.*)$'
            - labels:
                hostname:
                service:
                pid:

  # Kernel logs
  - job_name: kern
    static_configs:
      - targets:
          - localhost
        labels:
          job: kern
          host: monitoring-host
          __path__: /var/log/kern.log
    pipeline_stages:
      - match:
          selector: '{job="kern"}'
          stages:
            - regex:
                expression: '^(?P<timestamp>\S+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+kernel:\s*(?P<message>.*)$'
            - labels:
                hostname:

  # Docker container logs
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          host: monitoring-host
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - labels:
          stream:
      - output:
          source: log

  # Nginx access logs (if running nginx)
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-access
          host: monitoring-host
          __path__: /var/log/nginx/access.log
    pipeline_stages:
      - regex:
          expression: '^(?P<remote_addr>\S+)\s+-\s+(?P<remote_user>\S+)\s+\[(?P<time_local>[^\]]+)\]\s+"(?P<method>\S+)\s+(?P<request_uri>\S+)\s+(?P<protocol>\S+)"\s+(?P<status>\d+)\s+(?P<body_bytes_sent>\d+)\s+"(?P<http_referer>[^"]*)"\s+"(?P<http_user_agent>[^"]*)".*$'
      - labels:
          method:
          status:
          remote_addr:
      - timestamp:
          source: time_local
          format: '02/Jan/2006:15:04:05 -0700'

  # Nginx error logs
  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-error
          host: monitoring-host
          __path__: /var/log/nginx/error.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2}\s+\d{2}:\d{2}:\d{2})\s+\[(?P<level>\w+)\]\s+(?P<pid>\d+)#(?P<tid>\d+):\s+(?P<message>.*)$'
      - labels:
          level:
          pid:
      - timestamp:
          source: timestamp
          format: '2006/01/02 15:04:05'

  # SSH logs (subset of auth logs with specific filtering)
  - job_name: ssh
    static_configs:
      - targets:
          - localhost
        labels:
          job: ssh
          host: monitoring-host
          __path__: /var/log/auth.log
    pipeline_stages:
      - match:
          selector: '{job="ssh"}'
          stages:
            - regex:
                expression: '^(?P<timestamp>\S+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+sshd\[(?P<pid>\d+)\]:\s*(?P<message>.*)$'
            - labels:
                hostname:
                pid:
            - drop:
                expression: '.*CRON.*'  # Drop CRON related SSH entries

  # UFW firewall logs (if using UFW)
  - job_name: ufw
    static_configs:
      - targets:
          - localhost
        labels:
          job: ufw
          host: monitoring-host
          __path__: /var/log/ufw.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\S+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+kernel:.*UFW\s+(?P<action>\w+).*SRC=(?P<src_ip>\S+).*DST=(?P<dst_ip>\S+).*PROTO=(?P<protocol>\w+).*DPT=(?P<dst_port>\d+).*$'
      - labels:
          hostname:
          action:
          src_ip:
          dst_ip:
          protocol:
          dst_port:

  # Systemd journal logs
  - job_name: journal
    journal:
      json: false
      max_age: 12h
      path: /var/log/journal
      labels:
        job: systemd-journal
        host: monitoring-host
    pipeline_stages:
      - json:
          expressions:
            unit: _SYSTEMD_UNIT
            hostname: _HOSTNAME
            priority: PRIORITY
            message: MESSAGE
      - labels:
          unit:
          hostname:
          priority:

  # Application-specific logs (for custom applications)
  - job_name: applications
    static_configs:
      - targets:
          - localhost
        labels:
          job: applications
          host: monitoring-host
          __path__: /var/log/applications/*.log
    pipeline_stages:
      - match:
          selector: '{job="applications"}'
          stages:
            - regex:
                expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2})\s+(?P<level>\w+)\s+(?P<message>.*)$'
            - labels:
                level:
            - timestamp:
                source: timestamp
                format: '2006-01-02 15:04:05'

  # AdGuard Home logs (if accessible)
  - job_name: adguard
    static_configs:
      - targets:
          - localhost
        labels:
          job: adguard
          host: monitoring-host
          __path__: /var/log/adguard/*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2}\s+\d{2}:\d{2}:\d{2})\s+\[(?P<level>\w+)\]\s+(?P<message>.*)$'
      - labels:
          level:
      - timestamp:
          source: timestamp
          format: '2006/01/02 15:04:05'

  # Dokploy logs (if accessible via mounted volumes)
  - job_name: dokploy
    static_configs:
      - targets:
          - localhost
        labels:
          job: dokploy
          host: monitoring-host
          __path__: /var/log/dokploy/*.log
    pipeline_stages:
      - json:
          expressions:
            level: level
            timestamp: timestamp
            message: message
            service: service
      - labels:
          level:
          service:
      - timestamp:
          source: timestamp
          format: RFC3339

# Limits configuration
limits_config:
  readline_rate: 10000
  readline_burst: 20000

# Target configuration for service discovery
target_config:
  sync_period: 10s
